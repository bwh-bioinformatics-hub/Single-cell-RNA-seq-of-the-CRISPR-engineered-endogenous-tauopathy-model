
Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Attaching SeuratObject
Loading required package: Biobase
Loading required package: BiocGenerics
Loading required package: parallel

Attaching package: ‘BiocGenerics’

The following objects are masked from ‘package:parallel’:

    clusterApply, clusterApplyLB, clusterCall, clusterEvalQ,
    clusterExport, clusterMap, parApply, parCapply, parLapply,
    parLapplyLB, parRapply, parSapply, parSapplyLB

The following objects are masked from ‘package:dplyr’:

    combine, intersect, setdiff, union

The following objects are masked from ‘package:stats’:

    IQR, mad, sd, var, xtabs

The following objects are masked from ‘package:base’:

    anyDuplicated, append, as.data.frame, basename, cbind, colnames,
    dirname, do.call, duplicated, eval, evalq, Filter, Find, get, grep,
    grepl, intersect, is.unsorted, lapply, Map, mapply, match, mget,
    order, paste, pmax, pmax.int, pmin, pmin.int, Position, rank,
    rbind, Reduce, rownames, sapply, setdiff, sort, table, tapply,
    union, unique, unsplit, which.max, which.min

Welcome to Bioconductor

    Vignettes contain introductory material; view with
    'browseVignettes()'. To cite Bioconductor, see
    'citation("Biobase")', and for packages 'citation("pkgname")'.

Loading required package: SingleCellExperiment
Loading required package: SummarizedExperiment
Loading required package: MatrixGenerics
Loading required package: matrixStats

Attaching package: ‘matrixStats’

The following objects are masked from ‘package:Biobase’:

    anyMissing, rowMedians

The following object is masked from ‘package:dplyr’:

    count


Attaching package: ‘MatrixGenerics’

The following objects are masked from ‘package:matrixStats’:

    colAlls, colAnyNAs, colAnys, colAvgsPerRowSet, colCollapse,
    colCounts, colCummaxs, colCummins, colCumprods, colCumsums,
    colDiffs, colIQRDiffs, colIQRs, colLogSumExps, colMadDiffs,
    colMads, colMaxs, colMeans2, colMedians, colMins, colOrderStats,
    colProds, colQuantiles, colRanges, colRanks, colSdDiffs, colSds,
    colSums2, colTabulates, colVarDiffs, colVars, colWeightedMads,
    colWeightedMeans, colWeightedMedians, colWeightedSds,
    colWeightedVars, rowAlls, rowAnyNAs, rowAnys, rowAvgsPerColSet,
    rowCollapse, rowCounts, rowCummaxs, rowCummins, rowCumprods,
    rowCumsums, rowDiffs, rowIQRDiffs, rowIQRs, rowLogSumExps,
    rowMadDiffs, rowMads, rowMaxs, rowMeans2, rowMedians, rowMins,
    rowOrderStats, rowProds, rowQuantiles, rowRanges, rowRanks,
    rowSdDiffs, rowSds, rowSums2, rowTabulates, rowVarDiffs, rowVars,
    rowWeightedMads, rowWeightedMeans, rowWeightedMedians,
    rowWeightedSds, rowWeightedVars

The following object is masked from ‘package:Biobase’:

    rowMedians

Loading required package: GenomicRanges
Loading required package: stats4
Loading required package: S4Vectors

Attaching package: ‘S4Vectors’

The following objects are masked from ‘package:dplyr’:

    first, rename

The following object is masked from ‘package:base’:

    expand.grid

Loading required package: IRanges

Attaching package: ‘IRanges’

The following objects are masked from ‘package:dplyr’:

    collapse, desc, slice

Loading required package: GenomeInfoDb

Attaching package: ‘SummarizedExperiment’

The following object is masked from ‘package:SeuratObject’:

    Assays

The following object is masked from ‘package:Seurat’:

    Assays


Attaching package: ‘monocle3’

The following objects are masked from ‘package:Biobase’:

    exprs, fData, fData<-, pData, pData<-


Attaching package: ‘cowplot’

The following object is masked from ‘package:patchwork’:

    align_plots

Read in marker genes
✔ Reading from "ScRNA-seq_Hassan_2022".
✔ Range ''MarkerGenesFiltered''.
Set working dir
If using Leiden algorithm in FindMarkers
Step 2: Pre-processing
Remove ambient RNA by SoupX
Loading raw count data
Loading cell-only count data
Loading extra analysis data where available
180 genes passed tf-idf cut-off and 150 soup quantile filter.  Taking the top 100.
Using 936 independent estimates of rho.
Estimated global rho of 0.05
Expanding counts from 12 clusters to 9076 cells.
Loading raw count data
Loading cell-only count data
Loading extra analysis data where available
209 genes passed tf-idf cut-off and 143 soup quantile filter.  Taking the top 100.
Using 598 independent estimates of rho.
Estimated global rho of 0.06
Expanding counts from 11 clusters to 7708 cells.
Loading raw count data
Loading cell-only count data
Loading extra analysis data where available
76 genes passed tf-idf cut-off and 56 soup quantile filter.  Taking the top 56.
Using 263 independent estimates of rho.
Estimated global rho of 0.06
Expanding counts from 12 clusters to 5856 cells.
Loading raw count data
Loading cell-only count data
Loading extra analysis data where available
250 genes passed tf-idf cut-off and 72 soup quantile filter.  Taking the top 72.
Using 87 independent estimates of rho.
Estimated global rho of 0.17
Expanding counts from 20 clusters to 34142 cells.
Loading raw count data
Loading cell-only count data
Loading extra analysis data where available
177 genes passed tf-idf cut-off and 92 soup quantile filter.  Taking the top 92.
Using 311 independent estimates of rho.
Estimated global rho of 0.26
Expanding counts from 19 clusters to 42329 cells.
Loading raw count data
Loading cell-only count data
Loading extra analysis data where available
230 genes passed tf-idf cut-off and 79 soup quantile filter.  Taking the top 79.
Using 147 independent estimates of rho.
Estimated global rho of 0.27
Expanding counts from 20 clusters to 29605 cells.
Loading raw count data
Loading cell-only count data
Loading extra analysis data where available
115 genes passed tf-idf cut-off and 64 soup quantile filter.  Taking the top 64.
Using 50 independent estimates of rho.
Estimated global rho of 0.34
Estimated contamination is very high (0.34).
Expanding counts from 17 clusters to 32842 cells.
Loading raw count data
Loading cell-only count data
Loading extra analysis data where available
88 genes passed tf-idf cut-off and 68 soup quantile filter.  Taking the top 68.
Using 154 independent estimates of rho.
Estimated global rho of 0.05
Expanding counts from 11 clusters to 9770 cells.
Loading raw count data
Loading cell-only count data
Loading extra analysis data where available
69 genes passed tf-idf cut-off and 50 soup quantile filter.  Taking the top 50.
Using 200 independent estimates of rho.
Estimated global rho of 0.05
Expanding counts from 13 clusters to 9886 cells.
Warning messages:
1: In sparseMatrix(i = out@i[w] + 1, j = out@j[w] + 1, x = out@x[w],  :
  'giveCsparse' has been deprecated; setting 'repr = "T"' for you
2: In sparseMatrix(i = out@i[w] + 1, j = out@j[w] + 1, x = out@x[w],  :
  'giveCsparse' has been deprecated; setting 'repr = "T"' for you
3: In sparseMatrix(i = out@i[w] + 1, j = out@j[w] + 1, x = out@x[w],  :
  'giveCsparse' has been deprecated; setting 'repr = "T"' for you
4: In sparseMatrix(i = out@i[w] + 1, j = out@j[w] + 1, x = out@x[w],  :
  'giveCsparse' has been deprecated; setting 'repr = "T"' for you
5: In sparseMatrix(i = out@i[w] + 1, j = out@j[w] + 1, x = out@x[w],  :
  'giveCsparse' has been deprecated; setting 'repr = "T"' for you
6: In sparseMatrix(i = out@i[w] + 1, j = out@j[w] + 1, x = out@x[w],  :
  'giveCsparse' has been deprecated; setting 'repr = "T"' for you
7: In sparseMatrix(i = out@i[w] + 1, j = out@j[w] + 1, x = out@x[w],  :
  'giveCsparse' has been deprecated; setting 'repr = "T"' for you
8: In sparseMatrix(i = out@i[w] + 1, j = out@j[w] + 1, x = out@x[w],  :
  'giveCsparse' has been deprecated; setting 'repr = "T"' for you
9: In sparseMatrix(i = out@i[w] + 1, j = out@j[w] + 1, x = out@x[w],  :
  'giveCsparse' has been deprecated; setting 'repr = "T"' for you
Create Seurat object after SoupX
Warning: Feature names cannot have underscores ('_'), replacing with dashes ('-')
Warning: Feature names cannot have underscores ('_'), replacing with dashes ('-')
Warning: Feature names cannot have underscores ('_'), replacing with dashes ('-')
Warning: Feature names cannot have underscores ('_'), replacing with dashes ('-')
Warning: Feature names cannot have underscores ('_'), replacing with dashes ('-')
Warning: Feature names cannot have underscores ('_'), replacing with dashes ('-')
Warning: Feature names cannot have underscores ('_'), replacing with dashes ('-')
Warning: Feature names cannot have underscores ('_'), replacing with dashes ('-')
Warning: Feature names cannot have underscores ('_'), replacing with dashes ('-')
Remove raw data to save memory
Add percent.mt and percent.rb to cell level metadata
Rename nCount_RNA and nFeature_RNA
Run doublet detection scripts
Read in doublet scores
Read 9076 items
Read 9076 items
Read 7708 items
Read 7708 items
Read 5856 items
Read 5856 items
Read 34142 items
Read 34142 items
Read 42329 items
Read 42329 items
Read 29605 items
Read 29605 items
Read 32842 items
Read 32842 items
Read 9770 items
Read 9770 items
Read 9886 items
Read 9886 items
Feature plot before QC
Filtered cells with 3SD of mean nCount and nFeature, percent of mito
Feature plot after QC
Step 4: Sample processing, Normalization, Find variable features, Data scaling
Performing log-normalization
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Calculating gene variances
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Calculating feature variances of standardized and clipped values
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Performing log-normalization
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Calculating gene variances
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Calculating feature variances of standardized and clipped values
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Performing log-normalization
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Calculating gene variances
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Calculating feature variances of standardized and clipped values
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Performing log-normalization
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Calculating gene variances
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Calculating feature variances of standardized and clipped values
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Performing log-normalization
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Calculating gene variances
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Calculating feature variances of standardized and clipped values
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Performing log-normalization
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Calculating gene variances
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Calculating feature variances of standardized and clipped values
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Performing log-normalization
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Calculating gene variances
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Calculating feature variances of standardized and clipped values
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Performing log-normalization
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Calculating gene variances
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Calculating feature variances of standardized and clipped values
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Performing log-normalization
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Calculating gene variances
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Calculating feature variances of standardized and clipped values
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Step 5: Determine the ‘dimensionality’ of the dataset
Step 6: Cell clustering
Cell clustering using default settings: PCA, Louvain. CHANGE dims according to elbow plot !!!
Computing nearest neighbor graph
Computing SNN
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Warning: The default method for RunUMAP has changed from calling Python UMAP via reticulate to the R-native UWOT using the cosine metric
To use Python UMAP via reticulate, set umap.method to 'umap-learn' and metric to 'correlation'
This message will be shown once per session
15:31:09 UMAP embedding parameters a = 0.9922 b = 1.112
15:31:09 Read 4921 rows and found 15 numeric columns
15:31:09 Using Annoy for neighbor search, n_neighbors = 30
15:31:09 Building Annoy index with metric = cosine, n_trees = 50
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
15:31:10 Writing NN index file to temp file /tmp/245716.tmpdir/Rtmp5UxYsQ/file24b22c27386f
15:31:10 Searching Annoy index using 1 thread, search_k = 3000
15:31:11 Annoy recall = 100%
15:31:12 Commencing smooth kNN distance calibration using 1 thread
15:31:15 Initializing from normalized Laplacian + noise
15:31:15 Commencing optimization for 500 epochs, with 199574 positive edges
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
15:31:32 Optimization finished
Computing nearest neighbor graph
Computing SNN
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
15:31:34 UMAP embedding parameters a = 0.9922 b = 1.112
15:31:34 Read 3424 rows and found 15 numeric columns
15:31:34 Using Annoy for neighbor search, n_neighbors = 30
15:31:34 Building Annoy index with metric = cosine, n_trees = 50
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
15:31:35 Writing NN index file to temp file /tmp/245716.tmpdir/Rtmp5UxYsQ/file24b216b272c
15:31:35 Searching Annoy index using 1 thread, search_k = 3000
15:31:36 Annoy recall = 100%
15:31:36 Commencing smooth kNN distance calibration using 1 thread
15:31:38 Initializing from normalized Laplacian + noise
15:31:38 Commencing optimization for 500 epochs, with 136186 positive edges
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
15:31:49 Optimization finished
Computing nearest neighbor graph
Computing SNN
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
15:31:51 UMAP embedding parameters a = 0.9922 b = 1.112
15:31:51 Read 1970 rows and found 15 numeric columns
15:31:51 Using Annoy for neighbor search, n_neighbors = 30
15:31:51 Building Annoy index with metric = cosine, n_trees = 50
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
15:31:51 Writing NN index file to temp file /tmp/245716.tmpdir/Rtmp5UxYsQ/file24b22a56b2fc
15:31:51 Searching Annoy index using 1 thread, search_k = 3000
15:31:52 Annoy recall = 100%
15:31:52 Commencing smooth kNN distance calibration using 1 thread
15:31:54 Initializing from normalized Laplacian + noise
15:31:54 Commencing optimization for 500 epochs, with 75438 positive edges
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
15:32:01 Optimization finished
Computing nearest neighbor graph
Computing SNN
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
15:32:11 UMAP embedding parameters a = 0.9922 b = 1.112
15:32:11 Read 17095 rows and found 15 numeric columns
15:32:11 Using Annoy for neighbor search, n_neighbors = 30
15:32:11 Building Annoy index with metric = cosine, n_trees = 50
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
15:32:13 Writing NN index file to temp file /tmp/245716.tmpdir/Rtmp5UxYsQ/file24b2789100
15:32:13 Searching Annoy index using 1 thread, search_k = 3000
15:32:18 Annoy recall = 100%
15:32:19 Commencing smooth kNN distance calibration using 1 thread
15:32:22 Initializing from normalized Laplacian + noise
15:32:22 Commencing optimization for 200 epochs, with 733888 positive edges
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
15:32:43 Optimization finished
Computing nearest neighbor graph
Computing SNN
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
15:32:56 UMAP embedding parameters a = 0.9922 b = 1.112
15:32:56 Read 20984 rows and found 15 numeric columns
15:32:56 Using Annoy for neighbor search, n_neighbors = 30
15:32:56 Building Annoy index with metric = cosine, n_trees = 50
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
15:32:58 Writing NN index file to temp file /tmp/245716.tmpdir/Rtmp5UxYsQ/file24b26987e4b2
15:32:58 Searching Annoy index using 1 thread, search_k = 3000
15:33:05 Annoy recall = 100%
15:33:06 Commencing smooth kNN distance calibration using 1 thread
15:33:09 Initializing from normalized Laplacian + noise
15:33:09 Commencing optimization for 200 epochs, with 880708 positive edges
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
15:33:37 Optimization finished
Computing nearest neighbor graph
Computing SNN
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
15:33:54 UMAP embedding parameters a = 0.9922 b = 1.112
15:33:54 Read 22306 rows and found 15 numeric columns
15:33:54 Using Annoy for neighbor search, n_neighbors = 30
15:33:54 Building Annoy index with metric = cosine, n_trees = 50
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
15:33:57 Writing NN index file to temp file /tmp/245716.tmpdir/Rtmp5UxYsQ/file24b23603761
15:33:57 Searching Annoy index using 1 thread, search_k = 3000
15:34:05 Annoy recall = 100%
15:34:06 Commencing smooth kNN distance calibration using 1 thread
15:34:09 Initializing from normalized Laplacian + noise
15:34:09 Commencing optimization for 200 epochs, with 944670 positive edges
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
15:34:36 Optimization finished
Computing nearest neighbor graph
Computing SNN
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
15:34:51 UMAP embedding parameters a = 0.9922 b = 1.112
15:34:51 Read 23829 rows and found 15 numeric columns
15:34:51 Using Annoy for neighbor search, n_neighbors = 30
15:34:51 Building Annoy index with metric = cosine, n_trees = 50
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
15:34:54 Writing NN index file to temp file /tmp/245716.tmpdir/Rtmp5UxYsQ/file24b21db6065f
15:34:54 Searching Annoy index using 1 thread, search_k = 3000
15:35:02 Annoy recall = 100%
15:35:03 Commencing smooth kNN distance calibration using 1 thread
15:35:05 Initializing from normalized Laplacian + noise
15:35:06 Commencing optimization for 200 epochs, with 1009300 positive edges
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
15:35:35 Optimization finished
Computing nearest neighbor graph
Computing SNN
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
15:35:38 UMAP embedding parameters a = 0.9922 b = 1.112
15:35:38 Read 2518 rows and found 15 numeric columns
15:35:38 Using Annoy for neighbor search, n_neighbors = 30
15:35:38 Building Annoy index with metric = cosine, n_trees = 50
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
15:35:39 Writing NN index file to temp file /tmp/245716.tmpdir/Rtmp5UxYsQ/file24b215a569b4
15:35:39 Searching Annoy index using 1 thread, search_k = 3000
15:35:39 Annoy recall = 100%
15:35:40 Commencing smooth kNN distance calibration using 1 thread
15:35:42 Found 2 connected components, falling back to 'spca' initialization with init_sdev = 1
15:35:42 Initializing from PCA
15:35:42 Using 'irlba' for PCA
15:35:42 PCA: 2 components explained 41.5% variance
15:35:42 Commencing optimization for 500 epochs, with 98114 positive edges
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
15:35:51 Optimization finished
Computing nearest neighbor graph
Computing SNN
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
15:35:55 UMAP embedding parameters a = 0.9922 b = 1.112
15:35:55 Read 5764 rows and found 15 numeric columns
15:35:55 Using Annoy for neighbor search, n_neighbors = 30
15:35:55 Building Annoy index with metric = cosine, n_trees = 50
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
15:35:56 Writing NN index file to temp file /tmp/245716.tmpdir/Rtmp5UxYsQ/file24b24f326879
15:35:56 Searching Annoy index using 1 thread, search_k = 3000
15:35:58 Annoy recall = 100%
15:35:59 Commencing smooth kNN distance calibration using 1 thread
15:36:01 Initializing from normalized Laplacian + noise
15:36:01 Commencing optimization for 500 epochs, with 235432 positive edges
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
15:36:20 Optimization finished
Cell clustering using GLMPCA
Cell clustering using Leiden
